.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "EVP_KDF_TLS1_PRF 7"
.TH EVP_KDF_TLS1_PRF 7 "2021-03-24" "1.1.1g" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
EVP_KDF_TLS1_PRF \- The TLS1 PRF EVP_KDF implementation
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Support for computing the \fB\s-1TLS1\s0\fR \s-1PRF\s0 through the \fB\s-1EVP_KDF\s0\fR \s-1API.\s0
.PP
The \s-1EVP_KDF_TLS1_PRF\s0 algorithm implements the \s-1PRF\s0 used by \s-1TLS\s0 versions up to
and including \s-1TLS 1.2.\s0
.SS "Numeric identity"
.IX Subsection "Numeric identity"
\&\fB\s-1EVP_KDF_TLS1_PRF\s0\fR is the numeric identity for this implementation; it
can be used with the \fBEVP_KDF_CTX_new_id()\fR function.
.SS "Supported controls"
.IX Subsection "Supported controls"
The supported controls are:
.IP "\fB\s-1EVP_KDF_CTRL_SET_MD\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_MD"
This control works as described in \*(L"\s-1CONTROLS\*(R"\s0 in \s-1\fBEVP_KDF_CTX\s0\fR\|(3).
.Sp
The \f(CW\*(C`EVP_KDF_CTRL_SET_MD\*(C'\fR control is used to set the message digest associated
with the \s-1TLS PRF.\s0  \fBEVP_md5_sha1()\fR is treated as a special case which uses the
\&\s-1PRF\s0 algorithm using both \fB\s-1MD5\s0\fR and \fB\s-1SHA1\s0\fR as used in \s-1TLS 1.0\s0 and 1.1.
.IP "\fB\s-1EVP_KDF_CTRL_SET_TLS_SECRET\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_TLS_SECRET"
This control expects two arguments: \f(CW\*(C`unsigned char *sec\*(C'\fR, \f(CW\*(C`size_t seclen\*(C'\fR
.Sp
Sets the secret value of the \s-1TLS PRF\s0 to \fBseclen\fR bytes of the buffer \fBsec\fR.
Any existing secret value is replaced.
.Sp
\&\fBEVP_KDF_ctrl_str()\fR takes two type strings for this control:
.RS 4
.ie n .IP """secret""" 4
.el .IP "``secret''" 4
.IX Item "secret"
The value string is used as is.
.ie n .IP """hexsecret""" 4
.el .IP "``hexsecret''" 4
.IX Item "hexsecret"
The value string is expected to be a hexadecimal number, which will be
decoded before being passed on as the control value.
.RE
.RS 4
.RE
.IP "\fB\s-1EVP_KDF_CTRL_RESET_TLS_SEED\s0\fR" 4
.IX Item "EVP_KDF_CTRL_RESET_TLS_SEED"
This control does not expect any arguments.
.Sp
Resets the context seed buffer to zero length.
.IP "\fB\s-1EVP_KDF_CTRL_ADD_TLS_SEED\s0\fR" 4
.IX Item "EVP_KDF_CTRL_ADD_TLS_SEED"
This control expects two arguments: \f(CW\*(C`unsigned char *seed\*(C'\fR, \f(CW\*(C`size_t seedlen\*(C'\fR
.Sp
Sets the seed to \fBseedlen\fR bytes of \fBseed\fR.  If a seed is already set it is
appended to the existing value.
.Sp
The total length of the context seed buffer cannot exceed 1024 bytes;
this should be more than enough for any normal use of the \s-1TLS PRF.\s0
.Sp
\&\fBEVP_KDF_ctrl_str()\fR takes two type strings for this control:
.RS 4
.ie n .IP """seed""" 4
.el .IP "``seed''" 4
.IX Item "seed"
The value string is used as is.
.ie n .IP """hexseed""" 4
.el .IP "``hexseed''" 4
.IX Item "hexseed"
The value string is expected to be a hexadecimal number, which will be
decoded before being passed on as the control value.
.RE
.RS 4
.RE
.SH "NOTES"
.IX Header "NOTES"
A context for the \s-1TLS PRF\s0 can be obtained by calling:
.PP
.Vb 1
\& EVP_KDF_CTX *kctx = EVP_KDF_CTX_new_id(EVP_KDF_TLS1_PRF, NULL);
.Ve
.PP
The digest, secret value and seed must be set before a key is derived otherwise
an error will occur.
.PP
The output length of the \s-1PRF\s0 is specified by the \f(CW\*(C`keylen\*(C'\fR parameter to the
\&\fBEVP_KDF_derive()\fR function.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
This example derives 10 bytes using \s-1SHA\-256\s0 with the secret key \*(L"secret\*(R"
and seed value \*(L"seed\*(R":
.PP
.Vb 2
\& EVP_KDF_CTX *kctx;
\& unsigned char out[10];
\&
\& kctx = EVP_KDF_CTX_new_id(EVP_KDF_TLS1_PRF);
\& if (EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_MD, EVP_sha256()) <= 0) {
\&     error("EVP_KDF_CTRL_SET_MD");
\& }
\& if (EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_TLS_SECRET,
\&                  "secret", (size_t)6) <= 0) {
\&     error("EVP_KDF_CTRL_SET_TLS_SECRET");
\& }
\& if (EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_ADD_TLS_SEED, "seed", (size_t)4) <= 0) {
\&     error("EVP_KDF_CTRL_ADD_TLS_SEED");
\& }
\& if (EVP_KDF_derive(kctx, out, sizeof(out)) <= 0) {
\&     error("EVP_KDF_derive");
\& }
\& EVP_KDF_CTX_free(kctx);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1EVP_KDF_CTX\s0,
\&\fBEVP_KDF_CTX_new_id\fR\|(3),
\&\fBEVP_KDF_CTX_free\fR\|(3),
\&\fBEVP_KDF_ctrl\fR\|(3),
\&\fBEVP_KDF_derive\fR\|(3),
\&\*(L"\s-1CONTROLS\*(R"\s0 in \s-1\fBEVP_KDF_CTX\s0\fR\|(3)
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2018 The OpenSSL Project Authors. All Rights Reserved.
.PP
Licensed under the Apache License 2.0 (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<https://www.openssl.org/source/license.html>.
