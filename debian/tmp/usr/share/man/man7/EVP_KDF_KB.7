.\" Automatically generated by Pod::Man 4.10 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "EVP_KDF_KB 7"
.TH EVP_KDF_KB 7 "2021-03-24" "1.1.1g" "OpenSSL"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
EVP_KDF_KB \- The Key\-Based EVP_KDF implementation
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1EVP_KDF_KB\s0 algorithm implements the Key-Based key derivation function
(\s-1KBKDF\s0).  \s-1KBKDF\s0 derives a key from repeated application of a keyed \s-1MAC\s0 to an
input secret (and other optional values).
.SS "Numeric identity"
.IX Subsection "Numeric identity"
\&\fB\s-1EVP_KDF_KB\s0\fR is the numeric identity for this implementation; it can be used with the
\&\fBEVP_KDF_CTX_new_id()\fR function.
.SS "Supported controls"
.IX Subsection "Supported controls"
The supported controls are:
.IP "\fB\s-1EVP_KDF_CTRL_SET_KB_MODE\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_KB_MODE"
This control expects one argument: \f(CW\*(C`int mode\*(C'\fR
.Sp
Sets the mode for the \s-1KBKDF\s0 operation. There are two supported modes:
.RS 4
.IP "\fB\s-1EVP_KDF_KB_MODE_COUNTER\s0\fR" 4
.IX Item "EVP_KDF_KB_MODE_COUNTER"
The counter mode of \s-1KBKDF\s0 should be used. This is the default.
.IP "\fB\s-1EVP_KDF_KB_MODE_FEEDBACK\s0\fR" 4
.IX Item "EVP_KDF_KB_MODE_FEEDBACK"
The feedback mode of \s-1KBKDF\s0 should be used.
.RE
.RS 4
.RE
.IP "\fB\s-1EVP_KDF_CTRL_SET_KB_MAC_TYPE\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_KB_MAC_TYPE"
This control expects one argument: \f(CW\*(C`int mac_type\*(C'\fR
.Sp
Sets the mac type for the \s-1KBKDF\s0 operation. There are two supported mac types:
.RS 4
.IP "\fB\s-1EVP_KDF_KB_MAC_TYPE_HMAC\s0\fR" 4
.IX Item "EVP_KDF_KB_MAC_TYPE_HMAC"
The \s-1HMAC\s0 with the digest set by \fB\s-1EVP_KDF_CTRL_SET_MD\s0\fR should be used as the mac.
.IP "\fB\s-1EVP_KDF_KB_MAC_TYPE_CMAC\s0\fR" 4
.IX Item "EVP_KDF_KB_MAC_TYPE_CMAC"
The \s-1CMAC\s0 with the cipher set by \fB\s-1EVP_KDF_CTRL_SET_CIPHER\s0\fR should be used as the mac.
.RE
.RS 4
.RE
.IP "\fB\s-1EVP_KDF_CTRL_SET_MD\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_MD"
.PD 0
.IP "\fB\s-1EVP_KDF_CTRL_SET_CIPHER\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_CIPHER"
.IP "\fB\s-1EVP_KDF_CTRL_SET_KEY\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_KEY"
.IP "\fB\s-1EVP_KDF_CTRL_SET_SALT\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_SALT"
.PD
These controls work as described in \*(L"\s-1CONTROLS\*(R"\s0 in \s-1\fBEVP_KDF_CTX\s0\fR\|(3).
.IP "\fB\s-1EVP_KDF_CTRL_SET_KB_INFO\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_KB_INFO"
This control expects two arguments: \f(CW\*(C`unsigned char *info\*(C'\fR, \f(CW\*(C`size_t infolen\*(C'\fR
.IP "\fB\s-1EVP_KDF_CTRL_SET_KB_SEED\s0\fR" 4
.IX Item "EVP_KDF_CTRL_SET_KB_SEED"
This control expects two arguments: \f(CW\*(C`unsigned char *seed\*(C'\fR, \f(CW\*(C`size_t seedlen\*(C'\fR
.Sp
It is used only in the feedback mode and the length must be the same
as the block length of the cipher in \s-1CMAC\s0 or the size of the digest in \s-1HMAC.\s0
.PP
The controls \fB\s-1EVP_KDF_CTRL_SET_KEY\s0\fR, \fB\s-1EVP_KDF_CTRL_SET_SALT\s0\fR,
\&\fB\s-1EVP_KDF_CTRL_SET_KB_INFO\s0\fR, and \fB\s-1EVP_KDF_CTRL_SET_KB_SEED\s0\fR 
correspond to \s-1KI,\s0 Label, Context, and \s-1IV\s0 (respectively) in \s-1SP800\-108.\s0
As in that document, salt, info, and seed are optional and may be
omitted.
.PP
Depending on whether mac is \s-1CMAC\s0 or \s-1HMAC,\s0 either digest or cipher is
required (respectively) and the other is unused.
.SH "NOTES"
.IX Header "NOTES"
A context for \s-1KBKDF\s0 can be obtained by calling:
.PP
.Vb 1
\& EVP_KDF_CTX *kctx = EVP_KDF_CTX_new_id(EVP_KDF_KB);
.Ve
.PP
The output length of an \s-1KBKDF\s0 is specified via the \f(CW\*(C`keylen\*(C'\fR
parameter to the \fBEVP_KDF_derive\fR\|(3) function.
.PP
Note that currently OpenSSL only implements counter and feedback modes.  Other
variants may be supported in the future.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
This example derives 10 bytes using \s-1COUNTER\-HMAC\-SHA256,\s0 with \s-1KI\s0 \*(L"secret\*(R",
Label \*(L"label\*(R", and Context \*(L"context\*(R".
.PP
.Vb 2
\& EVP_KDF_CTX *kctx;
\& unsigned char out[10];
\&
\& kctx = EVP_KDF_CTX_new_id(EVP_KDF_KB);
\&
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_MD, EVP_sha256());
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KB_MAC_TYPE, EVP_KDF_KB_MAC_TYPE_HMAC);
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KEY, "secret", strlen("secret"));
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_SALT, "label", strlen("label"));
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KB_INFO, "context", strlen("context"));
\& if (EVP_KDF_derive(kctx, out, sizeof(out)) <= 0)
\&     error("EVP_KDF_derive");
\&
\& EVP_KDF_CTX_free(kctx);
.Ve
.PP
This example derives 10 bytes using \s-1FEEDBACK\-CMAC\-AES256,\s0 with \s-1KI\s0 \*(L"secret\*(R",
Label \*(L"label\*(R", Context \*(L"context\*(R", and \s-1IV\s0 \*(L"sixteen bytes iv\*(R".
.PP
.Vb 3
\& EVP_KDF_CTX *kctx;
\& unsigned char out[10];
\& unsigned char *iv = "sixteen bytes iv";
\&
\& kctx = EVP_KDF_CTX_new_id(EVP_KDF_KB);
\&
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_CIPHER, EVP_aes_256_cbc());
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KB_MAC_TYPE, EVP_KDF_KB_MAC_TYPE_CMAC);
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KB_MODE, EVP_KDF_KB_MODE_FEEDBACK);
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KEY, "secret", strlen("secret"));
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_SALT, "label", strlen("label"));
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KB_INFO, "context", strlen("context"));
\& EVP_KDF_ctrl(kctx, EVP_KDF_CTRL_SET_KB_SEED, iv, strlen(iv));
\& if (EVP_KDF_derive(kctx, out, sizeof(out)) <= 0)
\&     error("EVP_KDF_derive");
\&
\& EVP_KDF_CTX_free(kctx);
.Ve
.SH "CONFORMING TO"
.IX Header "CONFORMING TO"
\&\s-1NIST SP800\-108, IETF RFC 6803, IETF RFC 8009.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\s-1\fBEVP_KDF_CTX\s0\fR\|(3),
\&\fBEVP_KDF_CTX_new_id\fR\|(3),
\&\fBEVP_KDF_CTX_free\fR\|(3),
\&\fBEVP_KDF_ctrl\fR\|(3),
\&\fBEVP_KDF_size\fR\|(3),
\&\fBEVP_KDF_derive\fR\|(3),
\&\*(L"\s-1CONTROLS\*(R"\s0 in \s-1\fBEVP_KDF_CTX\s0\fR\|(3)
.SH "HISTORY"
.IX Header "HISTORY"
This functionality was added to OpenSSL 3.0.
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
Copyright 2019 The OpenSSL Project Authors. All Rights Reserved.
Copyright 2019 Red Hat, Inc.
.PP
Licensed under the Apache License 2.0 (the \*(L"License\*(R").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file \s-1LICENSE\s0 in the source distribution or at
<https://www.openssl.org/source/license.html>.
